package ${package.Service}.impl;
import ${cfg.apiParent}.${package.ModuleName}.vo.*;
import ${cfg.apiParent}.${package.ModuleName}.dto.*;
import java.util.Date;
import ${package.Entity}.${table.entityName};
import ${package.Entity}.${table.entityName};
import ${package.Mapper}.${table.entityName}Mapper;
import ${package.Service}.${table.entityName}Service;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import javax.annotation.Resource;
import java.util.List;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.transaction.annotation.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import icu.mhb.mybatisplus.plugln.base.service.impl.JoinServiceImpl;
import icu.mhb.mybatisplus.plugln.core.JoinLambdaWrapper;
import java.util.Arrays;
import net.yiyuan.common.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import lombok.extern.slf4j.Slf4j;
import net.yiyuan.common.utils.BeanUtilsPlus;
/**
* $!{table.comment.replaceAll("表", "管理")}Service层接口实现
*
* @author  ${author}
* @date ${date}
*
*/
@Slf4j
@Service
public class ${table.entityName}ServiceImpl extends JoinServiceImpl<${table.mapperName}, ${table.entityName}> implements ${table.entityName}Service {
@Resource
private ${table.mapperName} ${table.mapperName.substring(0,1).toLowerCase()}${table.mapperName.substring(1)};

/**
* ${table.comment.replaceAll("表", "")}列表(全部)
*
* @param request $!{table.comment.replaceAll("表", "")}实体
* @return {@link List< ${table.entityName}QueryVO >}
* @author  ${author}
* @date ${date}
*/
@Override
public List< ${table.entityName}QueryVO > list(${table.entityName}ListDTO request)throws Exception{

${table.entityName} po = new ${table.entityName}();
BeanUtilsPlus.copy(request, po);
JoinLambdaWrapper<${table.entityName}> wrapper = new JoinLambdaWrapper<>(po);
List
<${table.entityName}QueryVO> voList = joinList(wrapper, ${table.entityName}QueryVO.class);
    ##List<${table.entityName}QueryVO> voList = BeanUtilsPlus.copyToList(list, ${table.entityName}QueryVO.class);

    return voList;
    }


    /**
    * ${table.comment.replaceAll("表", "")}列表(分页)
    *
    * @param request $!{table.comment.replaceAll("表", "")}实体
    * @return {@link Page< ${table.entityName}QueryVO >}
    * @author  ${author}
    * @date ${date}
    */
    @Override
    public Page< ${table.entityName}QueryVO > page(${table.entityName}PageDTO request)throws Exception{
    ${table.entityName} po = new ${table.entityName}();
    BeanUtilsPlus.copy(request, po);
    JoinLambdaWrapper<${table.entityName}> wrapper = new JoinLambdaWrapper<>(po);
    ##    Page<${table.entityName}> page = joinPage(new Page<>(request.getPageNum(), request.getPageSize()), wrapper, ${table.entityName}.class);
    ##    Page<${table.entityName}QueryVO> voPage =new Page<>();
    ##    BeanUtilsPlus.copy(page,voPage);
    Page
    <${table.entityName}QueryVO> voPage = joinPage(new Page<>(request.getPageNum(), request.getPageSize()),
        wrapper, ${table.entityName}QueryVO.class);
        return voPage;
        }


        /**
        * ${table.comment.replaceAll("表", "")}详情
        *
        * @param id $!{table.comment.replaceAll("表", "")}id
        * @return {@link ${table.entityName}QueryVO}
        * @author  ${author}
        * @date ${date}
        */
        @Override
        public ${table.entityName}QueryVO details(String id)throws Exception{
        ${table.entityName} po = new ${table.entityName}();
        po.setId(id);
        JoinLambdaWrapper<${table.entityName}> wrapper = new JoinLambdaWrapper<>(po);
        ${table.entityName}QueryVO voBean = joinGetOne(wrapper, ${table.entityName}QueryVO.class);
        return voBean;
        }


        /**
        * ${table.comment.replaceAll("表", "")}详情
        *
        * @param request $!{table.comment.replaceAll("表", "")}实体
        * @return {@link ${table.entityName}}
        * @author  ${author}
        * @date ${date}
        */
        @Override
        public ${table.entityName}QueryVO details(${table.entityName} request)throws Exception{

        JoinLambdaWrapper<${table.entityName}> wrapper = new JoinLambdaWrapper<>(request);
        ${table.entityName}QueryVO voBean = joinGetOne(wrapper, ${table.entityName}QueryVO.class);
        return voBean;
        }


        /**
        * 删除${table.comment.replaceAll("表", "")}(支持批量)
        *
        * @param ids $!{table.comment.replaceAll("表", "")}id(多个逗号分割)
        * @return {@link boolean}
        * @author  ${author}
        * @date ${date}
        */

        @Override
        public boolean delete(String ids) throws Exception{
        return removeByIds(Arrays.asList(ids.split(",")));
        }

        /**
        * 批量删除${table.comment.replaceAll("表", "")}(根据同一属性,针对中间表)
        *
        * @param request $!{table.comment.replaceAll("表", "")}实体
        * @return {@link boolean}
        * @author  ${author}
        * @date ${date}
        */
        @Override
        public boolean delete(${table.entityName} request) throws Exception {
        JoinLambdaWrapper<${table.entityName}> wrapper = new JoinLambdaWrapper<>(request);
        return remove(wrapper);
        }

        /**
        * 编辑${table.comment.replaceAll("表", "")}
        *
        * @param request $!{table.comment.replaceAll("表", "")}实体
        * @return {@link boolean}
        * @author  ${author}
        * @date ${date}
        */

        @Override
        public boolean edit(${table.entityName}EditDTO request)throws Exception{
        ${table.entityName} po = new ${table.entityName}();
        BeanUtilsPlus.copy(request, po);
        JoinLambdaWrapper<${table.entityName}> wrapper = new JoinLambdaWrapper<>(po);
        ##        boolean result = updateById(po);
        return updateById(po);
        }


        /**
        * 新增${table.comment.replaceAll("表", "")}
        *
        * @param request $!{table.comment.replaceAll("表", "")}实体
        * @return {@link boolean}
        * @author  ${author}
        * @date ${date}
        */

        @Override
        public boolean add(${table.entityName}AddDTO request)throws Exception{
        ${table.entityName} po = new ${table.entityName}();
        BeanUtilsPlus.copy(request, po);
        ##        boolean result = save(po);
        return save(po);

        }
        }

