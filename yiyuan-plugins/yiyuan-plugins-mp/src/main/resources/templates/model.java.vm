package ${package.Entity};
import ${package.Entity}.*;
import $!{cfg.apiParent}.${package.ModuleName}.enums.*;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.springframework.format.annotation.DateTimeFormat;
import com.baomidou.mybatisplus.annotation.IdType;
import net.yiyuan.plugins.mp.constant.CustomSqlCondition;
import com.baomidou.mybatisplus.annotation.TableId;
import com.baomidou.mybatisplus.annotation.TableField;
import lombok.*;
import net.yiyuan.common.*;
#foreach($pkg in ${table.importPackages})
import ${pkg};
#end
#if(${springdoc})
import io.swagger.v3.oas.annotations.media.Schema;
#elseif(${swagger})
#end
#if(${entityLombokModel})
    #if(${chainModel})
    #end
#end
/**
 * $!{table.comment.replaceAll("表", "管理")}实体
 *
 * @author  ${author}
 * @date ${date}
 *
 */
#if(${entityLombokModel})
@Data

#end
#if(${superEntityClass})
public class ${entity} extends ${superEntityClass}#if(${activeRecord})<${entity}>#end {
#elseif(${activeRecord})
public class ${entity} extends Model<${entity}> {
#elseif(${entitySerialVersionUID})
public class ${entity}  implements Serializable{
#else
public class ${entity} {
#end
#if(${entitySerialVersionUID})
private static final long serialVersionUID=1L;
#end
## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyPropertyName=${field.propertyName})
    #end
    #if("$!field.comment" != "")
        #if(${springdoc})
        @Schema(description = "${field.comment}")
        #elseif(${swagger})
        @ApiModelProperty("${field.comment}")
        #else
        #end
    #end
    #if(${field.keyFlag})
        ## 主键
        #if(${field.keyIdentityFlag})
            ##        @TableId(value = "${field.annotationColumnName}", type = IdType.AUTO)
            ##        #elseif(!$null.isNull(${idType}) && "$!idType" != "")
            ##        @TableId(value = "${field.annotationColumnName}", type = IdType.${idType})
            ##        #elseif(${field.convert})
            ##        @TableId("${field.annotationColumnName}")
        #end

    /**
     * ${field.comment}
     * @date ${date}
     */
    @TableId(value = "${field.propertyName}", type = IdType.ASSIGN_UUID)
        ## 普通字段
    #elseif(${field.fill})
        ## -----   存在字段填充设置   -----
        #if(${field.convert})
        @TableField(value = "${field.annotationColumnName}", fill = FieldFill.${field.fill})
        #else
        @TableField(fill = FieldFill.${field.fill})
        #end
    #elseif(${field.convert})
    @TableField("${field.annotationColumnName}")
    #end
    ## 乐观锁注解
    #if(${field.versionField})
    @Version
    #end
    ## 逻辑删除注解
    #if(${field.logicDeleteField})
    @TableLogic
    #end
    ##@ApiModelProperty(value = "${field.comment}" )

    #if(${field.comment.indexOf("字典")}!=-1)
        ##    @Trans(type = TransType.DICTIONARY, key = "${entity}${field.propertyName.substring(0, 1).toUpperCase()}${field.propertyName.substring(1)}")
    #end
    ##    #if(${field.propertyType.indexOf("Date")}!=-1)
    ##    /**
    ##     * ${field.comment} DateTimeFormat//请求非body json时候  JsonFormat//请求为body json时候
    ##     * @see ${field.propertyType}
    ##     * @author  ${author}
    ##     * @date ${date}
    ##     */
    ##    @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
    ##    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
    ##    #end
    #if(${field.propertyType.indexOf("Date")}==-1&&${field.comment.indexOf("字典")}==-1&&${field.propertyName.indexOf(
        "id")}==-1)
    /**
     * ${field.comment}
     *
     * @see ${field.propertyType}
     * @author  ${author}
     * @date ${date}
     */
    #end
    #if(${field.comment.indexOf("#")}!=-1&&${field.comment.indexOf("|")}!=-1&&${field.propertyName.indexOf(
        "id")}==-1)
        ##stringUtils.capitalizeFirstLetter($field.propertyName)
    private ${entity}$field.propertyName.substring(0, 1).toUpperCase()$field.propertyName.substring(1)Enum ${field.propertyName};
    #end
    #if(${field.comment.indexOf("#")}==-1&&${field.comment.indexOf("|")}==-1)

        #if(${field.propertyName.equals("id")}||${field.propertyName.equals("parentId")})
        private ${field.propertyType} ${field.propertyName};
        #elseif(${field.propertyType.contains("String")})
        @TableField(condition = CustomSqlCondition.LIKE_RIGHT)
        private ${field.propertyType} ${field.propertyName};
        #elseif(${field.propertyType.contains("Date")})
        /**
         * ${field.comment}
         * @see ${field.propertyType}
         * @author  ${author}
         * @date ${date}
         */
        @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
        @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
        private ${field.propertyType} ${field.propertyName};
        /**
         * ${field.comment}(查询开始时间)
         * @see ${field.propertyType}
         * @author  ${author}
         * @date ${date}
         */
        @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
        @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
        @TableField(value = "created_time", condition = CustomSqlCondition.GET_EQUAL, select = false)
        private ${field.propertyType} ${field.propertyName}Gte;
        /**
         * ${field.comment}(查询结束时间)
         * @see ${field.propertyType}
         * @author  ${author}
         * @date ${date}
         */
        @TableField(value = "created_time", condition = CustomSqlCondition.LT_EQUAL, select = false)
        @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
        @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone = "GMT+8")
        private ${field.propertyType} ${field.propertyName}Lt;
        #else
        private ${field.propertyType} ${field.propertyName};
        #end

        ##        private ${field.propertyType} ${field.propertyName};


    #end


#end
## ----------  END 字段循环遍历  ----------
#if(!${entityLombokModel})di
    #foreach($field in ${table.fields})
        #if(${field.propertyType.equals("boolean")})
            #set($getprefix="is")
        #else
            #set($getprefix="get")
        #end
    public ${field.propertyType} ${getprefix}${field.capitalName}(){
            return ${field.propertyName};
            }
        #if(${chainModel})
        public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}){
        #else
        public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        #end
            this.${field.propertyName} = ${field.propertyName};
        #if(${chainModel})
                return this;
        #end
            }
    #end
    ## --foreach end---
#end
## --end of #if(!${entityLombokModel})--
#if(${entityColumnConstant})
    #foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} ="${field.name}";
    #end
#end
#if(${activeRecord})
@Override
public Serializable pkVal(){
    #if(${keyPropertyName})
            return this.${keyPropertyName};
    #else
            return null;
    #end
        }
#end
#if(!${entityLombokModel})
@Override
public String toString() {
        return "${entity}{" +
    #foreach($field in ${table.fields})
        #if($!{foreach.index}==0)
                "${field.propertyName} = " + ${field.propertyName} +
        #else
                ", ${field.propertyName} = " + ${field.propertyName} +
        #end
    #end
        "}";
        }
#end
        }